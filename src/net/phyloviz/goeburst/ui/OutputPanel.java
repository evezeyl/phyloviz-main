/*-
 * Copyright (c) 2011, PHYLOViZ Team <phyloviz@gmail.com>
 * All rights reserved.
 * 
 * This file is part of PHYLOViZ <http://www.phyloviz.net>.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Linking this library statically or dynamically with other modules is
 * making a combined work based on this library.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole combination.
 * 
 * As a special exception, the copyright holders of this library give you
 * permission to link this library with independent modules to produce an
 * executable, regardless of the license terms of these independent modules,
 * and to copy and distribute the resulting executable under terms of your
 * choice, provided that you also meet, for each linked independent module,
 * the terms and conditions of the license of that module.  An independent
 * module is a module which is not derived from or based on this library.
 * If you modify this library, you may extend this exception to your version
 * of the library, but you are not obligated to do so.  If you do not wish
 * to do so, delete this exception statement from your version.
 */

package net.phyloviz.goeburst.ui;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Date;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

public class OutputPanel extends TopComponent {

	private BufferedWriter bf;

	/** Creates new form OutputPanel */
	public OutputPanel() {
		initComponents();
		bf = new BufferedWriter(new LocalWriter());
	}

	@Override
	public void open() {
		Mode m = WindowManager.getDefault().findMode("output");
		m.dockInto(this);
		super.open();
	}

	public void append(String text) {
		try {
			bf.write(text);
		} catch (IOException ex) {
			// No exception to be caught, see LocalWriter.
		}
	}

	public void flush() {
		try {
			bf.flush();
		} catch (IOException ex) {
			// No exception to be caught, see LocalWriter.
		}
		jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
	}

	public void appendWithDate(String text) {
		append("[" + new Date() + "]  " + text);
	}

	@Override
	public int getPersistenceType() {
		return PERSISTENCE_NEVER;
	}

	@Override
	protected String preferredID() {
		return "OutputPanel";
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jScrollPane1 = new javax.swing.JScrollPane();
                jTextArea1 = new javax.swing.JTextArea();

                setLayout(new java.awt.BorderLayout());

                jTextArea1.setColumns(20);
                jTextArea1.setEditable(false);
                jTextArea1.setRows(5);
                jScrollPane1.setViewportView(jTextArea1);

                add(jScrollPane1, java.awt.BorderLayout.CENTER);
        }// </editor-fold>//GEN-END:initComponents
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JTextArea jTextArea1;
        // End of variables declaration//GEN-END:variables

	private class LocalWriter extends Writer {

		@Override
		public void write(char[] cbuf, int off, int len) {
			jTextArea1.append(new String(cbuf, off, len));
		}

		@Override
		public void flush() {
			// No flush is required.
		}

		@Override
		public void close() {
			// No closeable.
		}
	}
}
