/*-
 * Copyright (c) 2011, PHYLOViZ Team <phyloviz@gmail.com>
 * All rights reserved.
 * 
 * This file is part of PHYLOViZ <http://www.phyloviz.net>.
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Linking this library statically or dynamically with other modules is
 * making a combined work based on this library.  Thus, the terms and
 * conditions of the GNU General Public License cover the whole combination.
 * 
 * As a special exception, the copyright holders of this library give you
 * permission to link this library with independent modules to produce an
 * executable, regardless of the license terms of these independent modules,
 * and to copy and distribute the resulting executable under terms of your
 * choice, provided that you also meet, for each linked independent module,
 * the terms and conditions of the license of that module.  An independent
 * module is a module which is not derived from or based on this library.
 * If you modify this library, you may extend this exception to your version
 * of the library, but you are not obligated to do so.  If you do not wish
 * to do so, delete this exception statement from your version.
 */

package net.phyloviz.core.explorer;

import java.awt.BorderLayout;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import net.phyloviz.core.data.DataSetTracker;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.util.Lookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//net.phyloviz.core.explorer//DataSetExplorer//EN",
autostore = false)
public final class DataSetExplorerTopComponent extends TopComponent implements ExplorerManager.Provider {

	private static DataSetExplorerTopComponent instance;
	/** path to the icon used by the component and its open action */
	// static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
	private static final String PREFERRED_ID = "DataSetExplorerTopComponent";
	private final ExplorerManager mgr = new ExplorerManager();

	public DataSetExplorerTopComponent() {
		initComponents();
		BeanTreeView tv = new BeanTreeView();
		tv.setRootVisible(false);
		add(tv,BorderLayout.CENTER);

		setName(NbBundle.getMessage(DataSetExplorerTopComponent.class, "CTL_DataSetExplorerTopComponent"));
		setToolTipText(NbBundle.getMessage(DataSetExplorerTopComponent.class, "HINT_DataSetExplorerTopComponent"));
		// setIcon(ImageUtilities.loadImage(ICON_PATH, true));

		ActionMap map = getActionMap();
		map.put("delete", ExplorerUtils.actionDelete(mgr, true));

		InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		keys.put(KeyStroke.getKeyStroke("DELETE"), "delete");

		associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
		mgr.setRootContext(new AbstractNode(new ExplorerChildren(Lookup.getDefault().lookup(DataSetTracker.class).getLookup())));
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                setLayout(new java.awt.BorderLayout());
        }// </editor-fold>//GEN-END:initComponents

	        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
	/**
	 * Gets default instance. Do not use directly: reserved for *.settings files only,
	 * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
	 * To obtain the singleton instance, use {@link #findInstance}.
	 */
	public static synchronized DataSetExplorerTopComponent getDefault() {
		if (instance == null) {
			instance = new DataSetExplorerTopComponent();
		}
		return instance;
	}

	/**
	 * Obtain the DataSetExplorerTopComponent instance. Never call {@link #getDefault} directly!
	 */
	public static synchronized DataSetExplorerTopComponent findInstance() {
		TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
		if (win == null) {
			Logger.getLogger(DataSetExplorerTopComponent.class.getName()).warning(
				"Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
			return getDefault();
		}
		if (win instanceof DataSetExplorerTopComponent) {
			return (DataSetExplorerTopComponent) win;
		}
		Logger.getLogger(DataSetExplorerTopComponent.class.getName()).warning(
			"There seem to be multiple components with the '" + PREFERRED_ID
			+ "' ID. That is a potential source of errors and unexpected behavior.");
		return getDefault();
	}

	@Override
	public int getPersistenceType() {
		return TopComponent.PERSISTENCE_ALWAYS;
	}

	@Override
	public void componentOpened() {
		// TODO add custom code on component opening
	}

	@Override
	public void componentClosed() {
		// TODO add custom code on component closing
	}

	void writeProperties(java.util.Properties p) {
		// better to version settings since initial version as advocated at
		// http://wiki.apidesign.org/wiki/PropertyFiles
		p.setProperty("version", "1.0");
		// TODO store your settings
	}

	Object readProperties(java.util.Properties p) {
		if (instance == null) {
			instance = this;
		}
		instance.readPropertiesImpl(p);
		return instance;
	}

	private void readPropertiesImpl(java.util.Properties p) {
		String version = p.getProperty("version");
		// TODO read your settings according to their version
	}

	@Override
	protected String preferredID() {
		return PREFERRED_ID;
	}

	@Override
	public ExplorerManager getExplorerManager() {
		return mgr;
	}

	@Override
	public void addNotify() {
		super.addNotify();
		ExplorerUtils.activateActions(mgr, true);
	}

	@Override
	public void removeNotify() {
		super.addNotify();
		ExplorerUtils.activateActions(mgr, false);
	}
}
