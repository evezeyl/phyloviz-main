package net.phyloviz.loadmlst.wizard;

import java.awt.Font;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import net.phyloviz.loadmlst.io.XMLParser;
import org.openide.util.NbPreferences;

public final class LoadMLSTVisualPanel4 extends JPanel {

	private ArrayList<String> alLoci;
	private String[] saSequences;
	private Task task;
	private int iIndex;

	/** Creates new form LoadMLSTVisualPanel4 */
	public LoadMLSTVisualPanel4() {
		initComponents();
		iIndex = -1;
	}

	public void setEditorPanel(String file) {
		try {
			URL url = LoadMLSTVisualPanel4.class.getResource(file);
			jEditorPane1.setEditorKit(new HTMLEditorKit());
			jEditorPane1.setPage(url);
			Font font = UIManager.getFont("Label.font");
			String bodyRule = "body { font-family: " + font.getFamily() + "; "
					+ "font-size: " + font.getSize() + "pt; width: " + jEditorPane1.getSize().width + "px;}";
			((HTMLDocument) jEditorPane1.getDocument()).getStyleSheet().addRule(bodyRule);
		} catch (IOException e) {
			Logger.getLogger(LoadMLSTVisualPanel4.class.getName()).log(Level.WARNING,
					e.getLocalizedMessage());
		}
	}

	@Override
	public String getName() {
		return "Sequence Data";
	}

	public String getFilename(int i) {
		return jtfFile[i].getText();
	}

	public boolean isSeqDataSelected() {
		return jRadioButton2.isSelected();
	}

	public ArrayList<String> getLoci() {
		return alLoci;
	}

	public boolean hasSeqDataComplete() {
		for (int i = 0; i < alLoci.size(); i++) {
			if (saSequences[i] == null) {
				if (XMLParser.fileExists(jtfFile[i].getText())) {
					saSequences[i] = XMLParser.getParser().getLocusSequence(jtfFile[i].getText());
				} else {
					return false;
				}
			}
		}
		return true;
	}

	public StringReader getSequence(int i) {
		return new StringReader(saSequences[i]);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {

		buttonGroup1 = new javax.swing.ButtonGroup();
		jPanel5 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jRadioButton1 = new javax.swing.JRadioButton();
		jRadioButton2 = new javax.swing.JRadioButton();
		jEditorPane1 = new javax.swing.JEditorPane();

		setLayout(new java.awt.BorderLayout());

		jPanel5.setLayout(new java.awt.BorderLayout());

		jPanel2.setLayout(new java.awt.GridLayout(2, 0));

		buttonGroup1.add(jRadioButton1);
		jRadioButton1.setSelected(true);
		org.openide.awt.Mnemonics.setLocalizedText(jRadioButton1, org.openide.util.NbBundle.getMessage(LoadMLSTVisualPanel4.class, "LoadMLSTVisualPanel4.jRadioButton1.text"));
		jRadioButton1.addActionListener(new java.awt.event.ActionListener() {

			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButton1ActionPerformed(evt);
			}
		});
		jPanel2.add(jRadioButton1);

		buttonGroup1.add(jRadioButton2);
		org.openide.awt.Mnemonics.setLocalizedText(jRadioButton2, org.openide.util.NbBundle.getMessage(LoadMLSTVisualPanel4.class, "LoadMLSTVisualPanel4.jRadioButton2.text"));
		jRadioButton2.addActionListener(new java.awt.event.ActionListener() {

			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jRadioButton2ActionPerformed(evt);
			}
		});
		jPanel2.add(jRadioButton2);

		jPanel5.add(jPanel2, java.awt.BorderLayout.PAGE_START);

	}// </editor-fold>                        

	// Dynamic Frame begin
	public void initDynamicComponents(int iDBindex) {

		// User already pressed Back -> Next
		if (alLoci != null) {
			// User selected a different DB
			if (iDBindex != iIndex) {
				// Delete old form to be replaced
				jPanel5.remove(jPanel5.getComponentCount() - 1);
			} else {
				// Everything stays the same
				return;
			}
		} // else it is the first time

		iIndex = iDBindex;
		alLoci = XMLParser.getParser().getLoci(iIndex);
		saSequences = new String[alLoci.size()];

		jPanel1 = new javax.swing.JPanel();
		jPanelStart = new javax.swing.JPanel();
		jPanelStartS = new javax.swing.JPanel();
		jPanelStartC = new javax.swing.JPanel();
		jPanelStartE = new javax.swing.JPanel();
		jPanelCenter = new javax.swing.JPanel();
		jPanelEnd = new javax.swing.JPanel();
		jlName = new javax.swing.JLabel[alLoci.size()];
		jtbDownload = new javax.swing.JToggleButton[alLoci.size()];
		jtfFile = new javax.swing.JTextField[alLoci.size()];
		jbLocusBrowse = new javax.swing.JButton[alLoci.size()];

		jPanel1.setLayout(new java.awt.BorderLayout());
		jPanelStart.setLayout(new java.awt.BorderLayout());
		jPanelStartS.setLayout(new java.awt.GridLayout(alLoci.size(), 0));
		jPanelStartC.setLayout(new java.awt.GridLayout(alLoci.size(), 0));
		jPanelStartE.setLayout(new java.awt.GridLayout(alLoci.size(), 0));
		jPanelCenter.setLayout(new java.awt.GridLayout(alLoci.size(), 0));
		jPanelEnd.setLayout(new java.awt.GridLayout(alLoci.size(), 0));

		for (int i = 0; i < alLoci.size(); i++) {
			jlName[i] = new javax.swing.JLabel(alLoci.get(i));
			jlName[i].setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 12, 2, 8));
			jPanelStartS.add(jlName[i]);

			jtbDownload[i] = new javax.swing.JToggleButton(org.openide.util.NbBundle.getMessage(LoadMLSTVisualPanel4.class, "LoadMLSTVisualPanel4.jtbDownload"));
			jtbDownload[i].setEnabled(false);
			jtbDownload[i].setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.LOWERED));
			jtbDownload[i].addActionListener(new java.awt.event.ActionListener() {

				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jtbDownloadActionPerformed(evt);
				}
			});
			jPanelStartC.add(jtbDownload[i]);

			javax.swing.JLabel jlOR = new javax.swing.JLabel(org.openide.util.NbBundle.getMessage(LoadMLSTVisualPanel4.class, "LoadMLSTVisualPanel4.jlOR"));
			jlOR.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 12, 2, 8));
			jPanelStartE.add(jlOR);

			jtfFile[i] = new javax.swing.JTextField(org.openide.util.NbBundle.getMessage(LoadMLSTVisualPanel4.class, "LoadMLSTVisualPanel4.jtfFile"));
			jtfFile[i].setEnabled(false);
			jPanelCenter.add(jtfFile[i]);

			jbLocusBrowse[i] = new javax.swing.JButton();
			org.openide.awt.Mnemonics.setLocalizedText(jbLocusBrowse[i], org.openide.util.NbBundle.getMessage(LoadMLSTVisualPanel4.class, "LoadMLSTVisualPanel4.jbLocusBrowse.text"));
			jbLocusBrowse[i].setEnabled(false);
			jbLocusBrowse[i].setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.LOWERED));
			jbLocusBrowse[i].addActionListener(new java.awt.event.ActionListener() {

				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					jbBrowseActionPerformed(evt);
				}
			});
			jPanelEnd.add(jbLocusBrowse[i]);

		} // Dynamic Frame end

		jPanelStart.add(jPanelStartS, java.awt.BorderLayout.LINE_START);
		jPanelStart.add(jPanelStartC, java.awt.BorderLayout.CENTER);
		jPanelStart.add(jPanelStartE, java.awt.BorderLayout.LINE_END);

		jPanel1.add(jPanelStart, java.awt.BorderLayout.LINE_START);
		jPanel1.add(jPanelCenter, java.awt.BorderLayout.CENTER);
		jPanel1.add(jPanelEnd, java.awt.BorderLayout.LINE_END);

		jPanel5.add(jPanel1, java.awt.BorderLayout.CENTER);

		add(jPanel5, java.awt.BorderLayout.PAGE_START);

		jEditorPane1.setBackground(jPanel2.getBackground());
		jEditorPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 12, 8, 12));
		jEditorPane1.setEditable(
				false);
		// Is this really needed !?
		jEditorPane1.setMaximumSize(new java.awt.Dimension(200, 200));
		add(jEditorPane1, java.awt.BorderLayout.CENTER);

		// To prevent bad UI experience when comming back to this UI
		// www loader
		jRadioButton1.setSelected(true);
		for (int i = 0; i < alLoci.size(); i++) {
			jRadioButton1.setSelected(true);
			jtbDownload[i].setSelected(false);
			jtbDownload[i].setEnabled(false);
			jtfFile[i].setEnabled(true);
		}

		setEditorPanel("LoadMLSTVisualPanel4a.html");
		setSize(getMinimumSize());
	}

	private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		for (int i = 0; i < alLoci.size(); i++) {
			jtbDownload[i].setEnabled(false);
			jtfFile[i].setEnabled(false);
			jbLocusBrowse[i].setEnabled(false);
		}
		setEditorPanel("LoadMLSTVisualPanel4a.html");
		setSize(getMinimumSize());
	}

	private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		for (int i = 0; i < alLoci.size(); i++) {
			jtbDownload[i].setEnabled(true);
			jtfFile[i].setEnabled(true);
			jbLocusBrowse[i].setEnabled(true);
		}
		setEditorPanel("LoadMLSTVisualPanel4b.html");
		setSize(getMinimumSize());
	}

	private void jbBrowseActionPerformed(java.awt.event.ActionEvent evt) {
		if (fc == null) {
			fc = new JFileChooser();
		}
		String dir = NbPreferences.forModule(LoadMLSTWizardAction.class).get("LAST_DIR", "");
		if (dir != null) {
			fc.setCurrentDirectory(new File(dir));
		}
		int r = fc.showDialog(this, "Open");
		if (r == JFileChooser.APPROVE_OPTION && fc.getSelectedFile() != null) {
			javax.swing.JButton jb = (javax.swing.JButton) evt.getSource();
			for (int i = 0; i < alLoci.size(); i++) {
				if (jbLocusBrowse[i].equals(jb)) {
					jtfFile[i].setText(fc.getSelectedFile().getAbsolutePath());
					NbPreferences.forModule(LoadMLSTWizardAction.class).put("LAST_DIR", fc.getCurrentDirectory().getPath());
					break;
				}
			}
		}
	}

	private void jtbDownloadActionPerformed(java.awt.event.ActionEvent evt) {
		JToggleButton tb = (JToggleButton) evt.getSource();
		for (int i = 0; i < alLoci.size(); i++) {
			if (jtbDownload[i].equals(tb)) {
				if (jtbDownload[i].isSelected()) {
					task = new Task(i);
					task.execute();
				} else {
					task.cancel(true);
					saSequences[i] = null;
					jtbDownload[i].setText(org.openide.util.NbBundle.getMessage(LoadMLSTVisualPanel4.class, "LoadMLSTVisualPanel4.jtbDownload"));
				}
				break;
			}
		}
	}
	// Variables declaration - do not modify                     
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JEditorPane jEditorPane1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanelStart;
	private javax.swing.JPanel jPanelStartS;
	private javax.swing.JPanel jPanelStartC;
	private javax.swing.JPanel jPanelStartE;
	private javax.swing.JPanel jPanelCenter;
	private javax.swing.JPanel jPanelEnd;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel5;
	private javax.swing.JRadioButton jRadioButton1;
	private javax.swing.JRadioButton jRadioButton2;
	private JFileChooser fc;
	private javax.swing.JLabel[] jlName;
	private javax.swing.JToggleButton[] jtbDownload;
	private javax.swing.JTextField[] jtfFile;
	private javax.swing.JButton[] jbLocusBrowse;

	class Task extends SwingWorker<Void, Void> {

		private int iSeq;

		private Task(int i) {
			iSeq = i;
		}

		@Override
		public Void doInBackground() {
			saSequences[iSeq] = XMLParser.getParser().getLocusSequence(iIndex, iSeq);
			return null;
		}

		@Override
		public void done() {
			setCursor(null); //turn off the wait cursor
			jtbDownload[iSeq].setText("   Done!   ");
		}
	}
}
