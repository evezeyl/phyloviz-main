package net.phyloviz.nj.ui;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Date;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.cookies.SaveCookie;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

public class OutputPanel extends TopComponent {

	private BufferedWriter bf;

	/** Creates new form OutputPanel */
	public OutputPanel(final String name) {
		InstanceContent ic = new InstanceContent();
		associateLookup(new AbstractLookup(ic));

		ic.add(new SaveCookie() {

			@Override
			public void save() throws IOException {
				String title = "Saving " + name + "...";
				File f = new FileChooserBuilder(OutputPanel.class).setTitle(title).showSaveDialog();
				if (f != null) {
					try {
						if (!f.exists()) {
							if (!f.createNewFile()) {
								String failMsg = "Unable to create " + f.getName();
								DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(failMsg));
								return;
							}
						} else {
							String overwriteMessage = "Overwriting " + f.getName();
							Object userChose = DialogDisplayer.getDefault().notify(new NotifyDescriptor.Confirmation(overwriteMessage));
							if (NotifyDescriptor.CANCEL_OPTION.equals(userChose)) {
								return;
							}
						}

						save(f.getAbsoluteFile());
					} catch (IOException ioe) {
						String failMsg = "Error: " + ioe.getMessage();
						DialogDisplayer.getDefault().notify(new NotifyDescriptor.Message(failMsg));
					}
				} else {
					throw new FileNotFoundException("Unknown file!");
				}
			}

			private void save(File f) throws FileNotFoundException, IOException {
				PrintWriter pw = new PrintWriter(f);
				jTextArea1.write(pw);
				pw.close();
			}

			@Override
			public String toString() {
				return name;
			}
		});

		this.setName(name);
		initComponents();
		bf = new BufferedWriter(new LocalWriter());
	}

	@Override
	public void open() {
		Mode m = WindowManager.getDefault().findMode("output");
		m.dockInto(this);
		super.open();
	}

	public void append(String text) {
		try {
			bf.write(text);
		} catch (IOException ex) {
			// No exception to be caught, see LocalWriter.
		}
	}

	public void flush() {
		try {
			bf.flush();
		} catch (IOException ex) {
			// No exception to be caught, see LocalWriter.
		}
		jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
	}

	public void appendWithDate(String text) {
		append("[" + new Date() + "]  " + text);
	}

	@Override
	public int getPersistenceType() {
		return PERSISTENCE_NEVER;
	}

	@Override
	protected String preferredID() {
		return "OutputPanel";
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new java.awt.BorderLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

	private class LocalWriter extends Writer {

		@Override
		public void write(char[] cbuf, int off, int len) {
			jTextArea1.append(new String(cbuf, off, len));
		}

		@Override
		public void flush() {
			// No flush is required.
		}

		@Override
		public void close() {
			// No closeable.
		}
	}
}
